
#######################
# ***    PLUGINS   *** #
########################
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-cpu'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'robhurring/tmux-spotify'
set -g @plugin 'nhdaly/tmux-better-mouse-mode'
set -g @plugin 'tmux-plugins/tmux-sidebar'


#------------------------------------------------------------------------------#
#                                    config                                    #
#------------------------------------------------------------------------------#
########################
# ***    DISPLAY   *** #
########################
# make sure nvim looks normal in tmux
# set -g terminal-overrides ',xterm-256color:Tc'
# set -g default-terminal +P"tmux-256color"
# set -as terminal-overrides ',xterm*:sitm=\E[3m'
# Set tmux to display in 256 colors
set -g default-terminal    "screen-256color"
set -ga terminal-overrides ",xterm-256color:Tc"

# Set border colors
# set-option -g pane-border-style 'fg=#343D46,bg=colour0'
# set-option -g pane-active-border-style 'fg=colour3,bg=colour0'

# Set status line message style
set -g message-style "fg=colour5,bg=default"

# Set mode style (including history bar)
set -g mode-style "fg=colour3"


########################
# ***    GENERAL   *** #
########################

set-option -g prefix C-space
unbind C-b
# so that escapes register immidiately in vim
set -sg escape-time 0

# start index at 1
set -g base-index 1

# mouse support
set -g mouse on

# styling
set -g status-bg black
set -g status-fg white

set -g status-right ""
set -g status-left ""

set -g status-justify centre

set -g window-status-current-format "#[fg=magenta]#[fg=black]#[bg=magenta]#I #[bg=brightblack]#[fg=white] #W#[fg=brightblack]#[bg=black] "
set -g window-status-format "#[fg=yellow]#[fg=black]#[bg=yellow]#I #[bg=brightblack]#[fg=white] #W#[fg=brightblack]#[bg=black] "
# act like vim
# set -g mode-keys vi

set -g focus-events on

#------------------------------------------------------------------------------#
#                                   mappings                                   #
#------------------------------------------------------------------------------#

# moving between panes
bind -n M-h select-pane -L
bind -n M-j select-pane -D
bind -n M-k select-pane -U
bind -n M-l select-pane -R

# switch windows
bind -n M-0 select-window -t :0
bind -n M-1 select-window -t :1
bind -n M-2 select-window -t :2
bind -n M-3 select-window -t :3
bind -n M-4 select-window -t :4
bind -n M-5 select-window -t :5
bind -n M-6 select-window -t :6
bind -n M-7 select-window -t :7
bind -n M-8 select-window -t :8
bind -n M-9 select-window -t :9


bind -n M-% split-window -h
bind -n 'M-"' split-window

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

bind c new-window -c "#{pane_current_path}"
bind '"' split-window -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"

bind-key r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"
bind R source-file '~/.tmux.conf'
bind-key M split-window -h "nvim ~/.tmux.conf"

# easier and faster switching between next/prev window
bind C-p previous-window
bind C-n next-window


#########################
# ***  STATUS BAR   *** #
#########################

# Enable status bar
set-option -g status on

# Set window list to center
set -g status-justify centre

# Configure CPU plugin colors for statusline
set -g @cpu_low_fg_color "#[fg=green]"
set -g @cpu_medium_fg_color "#[fg=yellow]"
set -g @cpu_high_fg_color "#[fg=red]"

set -g @cpu_low_bg_color "#[bg=default]"
set -g @cpu_medium_bg_color "#[bg=default]"
set -g @cpu_high_bg_color "#[bg=default]"

# Left Status Bar: [CPU Usage]
set -g status-left "#{cpu_bg_color}#{cpu_fg_color} #{cpu_icon}#{cpu_percentage}"
set -g status-left-length 85

# Right Status Bar: [Spotify][Session Name][Date][Time]
set -g status-right "♫ #{spotify_status}#{spotify_track} #[fg=magenta]#S #[fg=colour8]‹#[fg=yellow]#[fg=yellow,bold,bg=default] %b %d %Y "

# Auto-hide status bar if pane is maximized
set-hook -g 'after-resize-pane'  'run-shell -b "if [ \#{window_zoomed_flag} -eq 1 ]; then tmux set status off; else tmux set status on; fi"'
set-hook -g 'after-new-window'   'run-shell -b "if [ \#{window_zoomed_flag} -eq 1 ]; then tmux set status off; else tmux set status on; fi"'
set-hook -g 'after-kill-pane'    'run-shell -b "if [ \#{window_zoomed_flag} -eq 1 ]; then tmux set status off; else tmux set status on; fi"'
set-hook -g 'pane-exited'        'run-shell -b "if [ \#{window_zoomed_flag} -eq 1 ]; then tmux set status off; else tmux set status on; fi"'
set-hook -g 'after-split-window' 'run-shell -b "if [ \#{window_zoomed_flag} -gt 1 ]; then tmux set status off; else tmux set status on; fi"'


# Initialize TMUX plugin manager
run '~/.tmux/plugins/tpm/tpm'
